enum SortDirection {
  ASCENDING
  DESCENDING
}

enum SortablePhotoField {
  name
  description
  category
  created
}

enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

scalar DateTime

input PostPhotoInput {
  name: String!
  description: String
  categroy: PhotoCategory = PORTRAIT
}

input PhotoFilter {
  category: PhotoCategory
  createdBetween: DateRange
  taggedUsers: [ID!]
  searchText: String
}

input DateRange {
  start: DateTime!
  end: DateTime!
}

input DataPage {
  first: Int = 25
  start: Int = 0
}

input DataSort {
  sort: SortDirection = DESCENDING
  sortBy: SortablePhotoField = created
}

"""
A user who has been authorized by GitHub at least once
"""
type User {
  """
  A user who has been authorized by GitHub at least once
  """
  gitHubLogin: ID!
  """
  A user who has been authorized by GitHub at least once
  """
  name: String
  """
  A user who has been authorized by GitHub at least once
  """
  avatar: String
  """
  All of the photos posted by this user
  """
  postedPhotos(
    filter: PhotoFilter
    paging: DataPage
    sorting: DataSort
  ): [Photo!]!
  """
  All of the photos posted by this user
  """
  inPhotos(
    filter: PhotoFilter
    paging: DataPage
    sorting: DataSort
  ): [Photo!]!
}

type Photo {
  id: ID!
  name: String!
  url: String!
  description: String
  created: DateTime
  categroy: PhotoCategory!
  postedBy: User!
  taggedUsers(
    filter: PhotoFilter
    paging: DataPage
    sorting: DataSort
  ): [User!]!
}

type AuthPayload {
  user: User!
  token: String!
}

type Query {
  totalPhotos: Int!
  allPhotos(
    filter: PhotoFilter
    paging: DataPage
    sorting: DataSort
  ): [Photo!]!
  totalUsers: Int!
  allUsers(
    paging: DataPage
    sorting: DataSort
  ): [User!]!
  User(githubLogin: ID!): User!
  Photo(id: ID!): Photo!
}

type Mutation {
  postPhoto(
    input: PostPhotoInput!
  ): Photo!
  githubAuth(code: String!): AuthPayload!
}

type Subscription {
  newPhoto(category: PhotoCategory): Photo!
  newUser: User!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
